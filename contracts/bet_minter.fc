;; Jettons discoverable smart contract

;; storage scheme
;; storage#_ total_supply:Coins admin_address:MsgAddress content:^Cell jetton_wallet_code:^Cell = Storage;

#include "imports/stdlib.fc";
#include "imports/params.fc";
#include "imports/jetton-utils.fc";
#include "imports/op-codes.fc";
#include "imports/messages.fc";
#include "imports/constants.fc";
#include "imports/errors.fc";
#pragma version >=0.2.0;

const general_consumed_gas = 10000000; ;; 0.01
const mint_consumed_gas = 20000000; ;; 0.02
const mint_send_value = 10000000; ;; 0.01 TON
const burn_notification_consumed_gas = 10000000; ;; 0.01
const burn_notification_value = 10000000; ;; 0.01 TON
const return_tokens_gas = 10000000; ;; 0.01 TON

(int, slice, cell, cell) load_data() inline {
    slice ds = get_data().begin_parse();
    return (
            ds~load_coins(), ;; total_supply
            ds~load_msg_addr(), ;; admin_address
            ds~load_ref(), ;; content
            ds~load_ref() ;; jetton_wallet_code
    );
}

() save_data(int total_supply, slice admin_address, cell content, cell jetton_wallet_code) impure inline {
    set_data(begin_cell()
            .store_coins(total_supply)
            .store_slice(admin_address)
            .store_ref(content)
            .store_ref(jetton_wallet_code)
            .end_cell()
    );
}

(slice, cell, cell) mint_data(slice to_address, cell jetton_wallet_code, int jetton_amount, query_id) inline {
    cell state_init = calculate_jetton_wallet_state_init(to_address, my_address(), jetton_wallet_code);
    slice to_wallet_address = calculate_jetton_wallet_address(state_init);

    cell msg_body = begin_cell()
            .store_uint(op::internal_transfer(), 32)
            .store_uint(query_id, 64)
            .store_coins(jetton_amount)
            .store_slice(my_address())
            .end_cell();

    return (to_wallet_address, msg_body, state_init);
}

() mint_tokens(slice to_address, cell jetton_wallet_code, int jetton_amount, query_id) impure inline {
    (slice to_wallet_address, cell msg_body, cell state_init) = mint_data(to_address, jetton_wallet_code, jetton_amount, query_id);

    var msg = begin_cell()
            .store_uint(0x18, 6)
            .store_slice(to_wallet_address)
            .store_coins(mint_send_value)
            .store_uint(4 + 2 + 1, 1 + 4 + 4 + 64 + 32 + 1 + 1 + 1)
            .store_ref(state_init)
            .store_ref(msg_body);
    send_raw_message(msg.end_cell(), 1); ;; pay transfer fees separately, revert on errors
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { ;; ignore empty messages
        return ();
    }

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);

    if (flags & 1) { ;; ignore all bounced messages
        return ();
    }
    slice sender_address = cs~load_msg_addr();
    cs~load_msg_addr(); ;; skip dst
    cs~load_coins(); ;; skip value
    cs~skip_bits(1); ;; skip extracurrency collection
    cs~load_coins(); ;; skip ihr_fee
    int fwd_fee = cs~load_coins(); ;; we use message fwd_fee for estimation of provide_wallet_address cost

    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);

    (int total_supply, slice admin_address, cell content, cell jetton_wallet_code) = load_data();

    if (op == op::mint()) {
        throw_unless(73, equal_slices(sender_address, admin_address));
        throw_unless(error::not_enough_gas_amount(), msg_value >= mint_consumed_gas + mint_send_value);

        slice to_address = in_msg_body~load_msg_addr();
        int jetton_amount = in_msg_body~load_coins();
        mint_tokens(to_address, jetton_wallet_code, jetton_amount, query_id);
        save_data(total_supply + jetton_amount, admin_address, content, jetton_wallet_code);
        return ();
    }

    if (op == op::return_tokens()) {
        throw_unless(error::not_enough_gas_amount(), msg_value >= general_consumed_gas);

        slice to_address = in_msg_body~load_msg_addr();
        int jetton_amount = in_msg_body~load_coins();
        (slice to_wallet_address, cell msg_body, _) = mint_data(to_address, jetton_wallet_code, jetton_amount, query_id);
        messages::send_simple(to_wallet_address, msg_body, send_mode::paid_externally(), 0);
        return ();
    }

    if (op == op::burn_notification()) {
        int ton_balance_before_msg = my_balance - msg_value;
        msg_value -= const::min_tons_for_storage() - min(ton_balance_before_msg, const::min_tons_for_storage());
        throw_unless(error::not_enough_gas_amount(), msg_value >= general_consumed_gas);

        slice from_address = in_msg_body~load_msg_addr();
        int jetton_amount = in_msg_body~load_coins();
        throw_unless(74,
                equal_slices(calculate_user_jetton_wallet_address(from_address, my_address(), jetton_wallet_code), sender_address)
        );

        var msg_body = begin_cell()
                .store_uint(op::burn_notification(), 32)
                .store_uint(query_id, 64)
                .store_slice(from_address)
                .store_coins(jetton_amount)
                .store_slice(in_msg_body)
                .end_cell();

        msg_value = (
                ton_balance_before_msg > const::max_tons_for_storage()
                        ? my_balance - const::max_tons_for_storage()
                        : msg_value
        ) - general_consumed_gas - fwd_fee;
        messages::send_simple(admin_address, msg_body, send_mode::paid_externally(), msg_value);

        save_data(total_supply - jetton_amount, admin_address, content, jetton_wallet_code);
        return ();
    }

    if (op == op::provide_wallet_address()) {
        throw_unless(75, msg_value > fwd_fee + general_consumed_gas);

        slice owner_address = in_msg_body~load_msg_addr();
        int include_address? = in_msg_body~load_uint(1);

        cell included_address = include_address?
                ? begin_cell().store_slice(owner_address).end_cell()
                : null();

        var msg = begin_cell()
                .store_uint(0x18, 6)
                .store_slice(sender_address)
                .store_coins(0)
                .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
                .store_uint(op::take_wallet_address(), 32)
                .store_uint(query_id, 64);

        if (is_resolvable?(owner_address)) {
            msg = msg.store_slice(calculate_user_jetton_wallet_address(owner_address, my_address(), jetton_wallet_code));
        } else {
            msg = msg.store_uint(0, 2); ;; addr_none
        }
        send_raw_message(msg.store_maybe_ref(included_address).end_cell(), 64);
        return ();
    }

    if (op == 3) { ;; change admin
        throw_unless(73, equal_slices(sender_address, admin_address));
        slice new_admin_address = in_msg_body~load_msg_addr();
        save_data(total_supply, new_admin_address, content, jetton_wallet_code);
        return ();
    }

    if (op == 4) { ;; change content, delete this for immutable tokens
        throw_unless(73, equal_slices(sender_address, admin_address));
        save_data(total_supply, admin_address, in_msg_body~load_ref(), jetton_wallet_code);
        return ();
    }

    throw(0xffff);
}

(int, int, slice, cell, cell) get_jetton_data() method_id {
    (int total_supply, slice admin_address, cell content, cell jetton_wallet_code) = load_data();
    return (total_supply, -1, admin_address, content, jetton_wallet_code);
}

slice get_wallet_address(slice owner_address) method_id {
    (int total_supply, slice admin_address, cell content, cell jetton_wallet_code) = load_data();
    return calculate_user_jetton_wallet_address(owner_address, my_address(), jetton_wallet_code);
}