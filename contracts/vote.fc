#pragma version >=0.4.0;

#include "imports/stdlib.fc";
#include "imports/errors.fc";
#include "imports/messages.fc";
#include "imports/op-codes.fc";
#include "imports/constants.fc";

const cashier_id = "cashier"c;
const wallet_id = "wallet"c;
const votes_storage_id = "votes_storage"c;

(cell, cell) load_data() inline {
    slice ds = get_data().begin_parse();
    return (
            ds~load_ref(), ;; addresses
            ds~load_ref() ;; pool
    );
}

slice get_address(cell dic, int id) impure inline {
    (cell payload, int success) = dic.udict_get_ref?(32, id);
    throw_unless(error::dict_value_not_found(), success);
    slice ds = payload.begin_parse();
    return ds~load_msg_addr();
}

int get_lot_id(slice addr, int id_set) inline {
    cell cell_id = begin_cell()
            .store_slice(addr)
            .store_uint(id_set, 32)
            .end_cell();
    return cell_hash(cell_id);
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) {
        return ();
    }

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    if (flags & 1) {
        return ();
    }

    slice sender_addr = cs~load_msg_addr();

    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);

    (cell addresses, cell pool) = load_data();

    if (op == op::voting()) {
        slice wallet = get_address(addresses, wallet_id);
        throw_unless(error::invalid_sender_addr(), equal_slices(sender_addr, wallet));

        ;; todo: return op if invalid format
        slice target = in_msg_body~load_msg_addr();
        int id_set = in_msg_body~load_uint(32);
        int id = get_lot_id(target, id_set);
    }

    throw(0xffff);
}
