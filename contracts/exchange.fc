#pragma version >=0.4.0;

#include "imports/stdlib.fc";
#include "imports/errors.fc";
#include "imports/messages.fc";
#include "imports/op-codes.fc";


(cell, cell, cell) load_data() inline {
    slice ds = get_data().begin_parse();
    return (
            ds~load_dict(), ;; addresses
            ds~load_dict(), ;; supplies
            ds~load_dict(), ;; comissions
    );
}

() save_data(cell addresses, cell supplies, cell comissions) impure inline {
    set_data(begin_cell()
            .store_dict(addresses)
            .store_dict(supplies)
            .store_dict(comissions)
            .end_cell()
    );
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) {
        return ();
    }

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    if (flags & 1) {
        return ();
    }

    slice sender_address = cs~load_msg_addr();
    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);

    (cell addresses, cell supplies, cell comissions) = load_data();

    if (op == op::purchased_bet()) {
        int usd_amount = in_msg_body~load_coins();
        slice from_address = in_msg_body~load_msg_addr();

        (slice address, int success) = addresses.udict_get?(256, "payment_acceptance");
        throw_unless(50, success);
        throw_unless(51, equal_slices(sender_address, address));

        (slice payload, int success) = addresses.udict_get?(256, "bet_buy");
        throw_unless(52, success);

        int sign = payload~load_uint(1); ;; sign
        int num_part = payload~load_uint(32); ;; numerator part
        int denom_part = payload~load_uint(32); ;; denominator part
        int comission = muldiv(amount, num_part, denom_part);

        (int usd_supply, int success) = addresses.udict_get?(256, "usd_supply");
        throw_unless(53, success);
        (int bet_supply, int success) = addresses.udict_get?(256, "bet_supply");
        throw_unless(54, success);

        (int minter_bet, int success) = addresses.udict_get?(256, "minter_bet");
        throw_unless(55, success);

        int bet_amount = usd_amount;
        if (sign == 0) {
            bet_amount -= comission;
            throw_unless(56, bet_amount > 0);
        } else {
            bet_amount += comission;
        }

        usd_supply~udict_set(256, "usd_supply", usd_supply + usd_amount);
        bet_supply~udict_set(256, "bet_supply", bet_supply + bet_amount);

        var msg_body = begin_cell()
                .store_uint(op::, 32)
                .store_uint(query_id, 64)
                .store_coins(bet_amount)
                .store_slice(from_address)
                .end_cell();
        messages::send_simple(0, minter_bet, msg_body, NORMAL);

        save_data(addresses, supplies, comissions);
        return ();
    }

    if (op == op::sell_bet()) {
        return ();
    }

    if (op == op::burned_bet()) {
        return ();
    }

    if (op == op::change_comission_bet_buy()) {
        return ();
    }

    if (op == op::change_comission_bet_sell()) {
        return ();
    }

    if (op == op::change_comission_gov_buy()) {
        return ();
    }

    if (op == op::change_comission_gov_sell()) {
        return ();
    }

    if (op == op::change_minter_bet()) {
        return ();
    }

    if (op == op::change_minter_gov()) {
        return ();
    }

    throw(0xffff);
}

(cell, cell, cell) get_data() method_id {
    return load_data();
}
