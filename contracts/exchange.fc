#pragma version >=0.4.0;

#include "imports/stdlib.fc";
#include "imports/errors.fc";
#include "imports/messages.fc";
#include "imports/op-codes.fc";

(cell, cell, cell) load_data() inline {
    slice ds = get_data().begin_parse();
    return (
            ds~load_ref(), ;; addresses
            ds~load_ref(), ;; supplies
            ds~load_ref(), ;; comissions
    );
}

() save_data(cell addresses, cell supplies, cell comissions) impure inline {
    set_data(begin_cell()
            .store_ref(addresses)
            .store_ref(supplies)
            .store_ref(comissions)
            .end_cell()
    );
}

;; ton storage, bet minter, gov minter
(int, int, int) get_addresses(cell addresses) inline {
    slice ds = addresses.begin_parse();
    return (ds~load_msg_addr(), ds~load_msg_addr(), ds~load_msg_addr());
}

;; ton, bet, gov
(int, int, int) get_supplies(cell supplies) inline {
    slice ds = supplies.begin_parse();
    return (ds~load_coins(), ds~load_coins(), ds~load_coins());
}

cell combine_supplies(int ton_supply, int bet_supply, int gov_supply) inline {
    return begin_cell()
            .store_coins(ton_supply)
            .store_coins(bet_supply)
            .store_coins(gov_supply)
            .end_cell();
}

(cell, cell, cell, cell) get_fees(cell comissions) inline {
    slice ds = comissions.begin_parse();
    return (
            ds~load_fee(), ;; bet buy
            ds~load_fee(), ;; bet sell
            ds~load_fee(), ;; gov buy
            ds~load_fee(), ;; gov sell
    );
}

cell load_fee(slice ds) inline {
    return begin_cell().
            store_uint(ds~load_uint(65), 65)
            .end_cell();
}

int get_fee(cell payload, int amount) {
    slice ds = payload.begin_parse();
    int sign = ds~load_uint(1);
    int num_part = ds~load_uint(32);
    int denom_part = ds~load_uint(32);
    int fee = muldiv(amount, num_part, denom_part);
    return fee == 0 ? fee : - fee;
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) {
        return ();
    }

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    if (flags & 1) {
        return ();
    }

    slice sender_address = cs~load_msg_addr();
    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);

    (cell addresses, cell supplies, cell fees) = load_data();
    (slice ton_storage, slice bet_minter, slice gov_minter) = get_addresses(addresses);
    (int ton_supply, int bet_supply, int gov_supply) = get_supplies(supplies);
    (cell bet_buy_fee, cell bet_sell_fee, cell gov_buy_fee, cell gov_sell_fee) = get_fees(fees);

    if (op == op::buy_bet_for_ton()) {
        throw_unless(error::wrong_ton_storage_addr(), equal_slices(sender_address, ton_storage));

        slice from_address = in_msg_body~load_msg_addr();
        int ton_amount = in_msg_body~load_coins();

        int fee = get_fee(bet_buy_fee, ton_amount);
        int bet_amount = ton_amount - fee;
        throw_unless(error::invalid_bet_amount(), bet_amount > 0);

        var msg_body = begin_cell()
                .store_uint(op::mint(), 32)
                .store_uint(query_id, 64)
                .store_slice(from_address)
                .store_coins(bet_amount)
                .end_cell();

        messages::send_simple(0, bet_minter, msg_body, send_mode:normal());

        supplies = combine_supplies(ton_supply + ton_amount, bet_supply + bet_amount, gov_supply);
        save_data(addresses, supplies, fees);
        return ();
    }

    if (op == op::sell_bet()) {
        int amount = in_msg_body~load_coins();

        var msg_body = begin_cell()
                .store_uint(op::burn(), 32)
                .store_uint(query_id, 64)
                .store_slice(sender_address)
                .store_coins(amount)
                .end_cell();

        messages::send_simple(0, bet_minter, msg_body, send_mode:normal());
        return ();
    }

    if (op == op::burned_bet()) {
        throw_unless(error::wrong_bet_minter_addr(), equal_slices(sender_address, bet_minter));

        slice from_address = in_msg_body~load_msg_addr();
        int bet_amount = in_msg_body~load_coins();

        int fee = get_fee(bet_sell_fee, bet_amount);
        int ton_amount = bet_amount - fee;
        throw_unless(error::invalid_ton_amount(), ton_amount > 0);

        supplies = combine_supplies(ton_supply - ton_amount, bet_supply - bet_amount, gov_supply);
        save_data(addresses, supplies, fees);
        return ();
    }

    if (op == op::inc_bet_buy_fee()) {
        return ();
    }

    if (op == op::dec_bet_buy_fee()) {
        return ();
    }

    if (op = op::inc_bet_sell_fee()) {
        return ();
    }

    if (op = op::dec_bet_sell_fee()) {
        return ();
    }

    if (op == op::inc_gov_buy_fee()) {
        return ();
    }

    if (op == op::dec_gov_buy_fee()) {
        return ();
    }

    if (op = op::inc_gov_sell_fee()) {
        return ();
    }

    if (op = op::dec_gov_sell_fee()) {
        return ();
    }


    throw(0xffff);
}

(cell, cell, cell) get_data() method_id {
    return load_data();
}
