#pragma version >=0.4.0;

#include "imports/stdlib.fc";
#include "imports/errors.fc";
#include "imports/messages.fc";
#include "imports/op-codes.fc";
#include "imports/constants.fc";

const cashier_id = "cashier"c;
const wallet_id = "wallet"c;
const votes_minter_id = "votes_minter"c;

const votes_minter_send_value = 30000000; ;; 0.03 TON

;; ===== pool =====
;; last consensus: 0 - preserve, 1 - increase, 2 - decrease
;; votes preserve
;; votes increase
;; votes decrease
;; last vote time
;; time to finalize

(cell, cell, int) load_data() inline {
    slice ds = get_data().begin_parse();
    return (
            ds~load_ref(), ;; addresses
            ds~load_ref(), ;; pool
            ds~load_coins() ;; gov supply
    );
}

() save_data(cell addresses, cell pool, int gov_supply) impure inline {
    set_data(begin_cell()
            .store_ref(addresses)
            .store_ref(pool)
            .store_coins(gov_supply)
            .end_cell()
    );
}

slice get_address(cell dic, int id) impure inline {
    (cell payload, int success) = dic.udict_get_ref?(32, id);
    throw_unless(error::dict_value_not_found(), success);
    slice ds = payload.begin_parse();
    return ds~load_msg_addr();
}

int get_lot_id(slice addr, int id_set) inline {
    cell cell_id = begin_cell()
            .store_slice(addr)
            .store_uint(id_set, 32)
            .end_cell();
    return cell_hash(cell_id);
}

(int, int, int, int) get_lot_data(cell payload) {
    slice ds = payload.begin_parse();
    return (
            ds~load_uint(2), ;; last consensus: 0 - preserve, 1 - increase, 2 - decrease
            ds~load_coins(), ;; votes preserve
            ds~load_coins(), ;; votes increase
            ds~load_coins(), ;; votes decrease
            ds~load_uint(32), ;; last vote time
            ds~load_uint(32) ;; time to finalize
    );
}

;; int return_tokens(slice addr, int amount) impure inline {
;; }

() send_coins(slice destination, slice user_addr, int token_amount, int op, int msg_value, int query_id) impure inline_ref {
    throw_unless(error::invalid_amount(), token_amount > 0);

    var msg_body = begin_cell()
            .store_uint(op, 32)
            .store_uint(query_id, 64)
            .store_slice(user_addr)
            .store_coins(token_amount)
            .end_cell();

    messages::send_simple(destination, msg_body, send_mode::paid_externally(), msg_value);
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) {
        return ();
    }

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    if (flags & 1) {
        return ();
    }

    slice sender_addr = cs~load_msg_addr();
    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);

    (cell addresses, cell pool, int gov_supply) = load_data();

    if (op == op::voting()) {
        slice wallet = get_address(addresses, wallet_id);
        throw_unless(error::invalid_sender_addr(), equal_slices(sender_addr, wallet));

        slice to_addr = in_msg_body~load_msg_addr();
        int amount = in_msg_body~load_coins();

        slice target = "";
        int id_set = 0;
        try {
            target = in_msg_body~load_msg_addr(); ;; if target addr is wrong - gov tokens will be lost
            id_set = in_msg_body~load_uint(32);
        } catch (_, _) {
            ;;             return_tokens(to_addr, amount);
        }

        int id = get_lot_id(target, id_set);
        (cell payload, int success) = pool.udict_get_ref?(32, id);

        if success {
            slice ds = payload.begin_parse();
            int votes = ds~load_coins();
            votes += amount;
            payload = begin_cell().store_coins(votes).end_cell();
            pool~udict_set_ref(32, id, payload);
            save_data(addresses, pool, gov_supply);

            ;; check votes

            slice votes_minter = get_address(addresses, votes_minter_id);
            send_coins(votes_minter, to_addr, amount, op::mint(), votes_minter_send_value, query_id);
        } else {
        }

        return ();
    }

    if (op == op::update_gov_supply()) {
        slice cashier = get_address(addresses, cashier_id);
        throw_unless(error::invalid_sender_addr(), equal_slices(sender_addr, cashier));
        int new_supply = in_msg_body~load_coins();
        save_data(addresses, pool, new_supply);
        ;; check votes
        return ();
    }

    throw(0xffff);
}

int get_voter_data() method_id {
    return now();
}