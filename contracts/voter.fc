#pragma version >=0.4.0;

#include "imports/stdlib.fc";
#include "imports/errors.fc";
#include "imports/messages.fc";
#include "imports/op-codes.fc";
#include "imports/constants.fc";

const cashier_id = "cashier"c;
const wallet_id = "wallet"c;
const votes_minter_id = "votes_minter"c;

const instant_approve_id = "instant_approve"c;
const half_approve_wait_id = "half_approve_wait"c;

const votes_minter_send_value = 30000000; ;; 0.03 TON
const return_tokens_send_value = 30000000; ;; 0.03 TON
const target_send_value = 10000000; ;; 0.01 TON

(cell, cell, cell, int) load_data() inline {
    slice ds = get_data().begin_parse();
    return (
            ds~load_dict(), ;; addresses
            ds~load_dict(), ;; pool
            ds~load_dict(), ;; settings
            ds~load_coins() ;; gov supply
    );
}

() save_data(cell addresses, cell pool, cell settings, int gov_supply) impure inline {
    set_data(begin_cell()
            .store_dict(addresses)
            .store_dict(pool)
            .store_dict(settings)
            .store_coins(gov_supply)
            .end_cell()
    );
}

slice get_address(cell addresses, int id) impure inline {
    (slice addr, int success) = addresses.udict_get?(32, id);
    throw_unless(error::dict_value_not_found(), success);
    return addr;
}

int get_lot_id(slice addr, int id_set) inline {
    cell dc = begin_cell().store_slice(addr).end_cell();
    slice ds = dc.begin_parse();
    ds~skip_bits(11);
    return ds~load_uint(256) - id_set;
}

(int, int, int, int, int, int) get_lot_data(cell payload) {
    slice ds = payload.begin_parse();
    ds~skip_bits(256); ;; target addr
    ds~skip_bits(32); ;; setting id
    return (
            ds~load_uint(2), ;; last consensus: 0 - preserve, 1 - increase, 2 - decrease
            ds~load_coins(), ;; votes preserve
            ds~load_coins(), ;; votes increase
            ds~load_coins(), ;; votes decrease
            ds~load_uint(32), ;; last vote time
            ds~load_uint(32) ;; time to finalize
    );
}

int get_setting(cell dic, int id) impure inline {
    (cell payload, int success) = dic.udict_get_ref?(32, id);
    throw_unless(error::dict_value_not_found(), success);
    slice ds = payload.begin_parse();
    ds~skip_bits(2);
    return ds~load_int(32);
}

() send_change(slice destination, int id_set, int choice, int query_id) impure inline {
    var msg_body = begin_cell()
            .store_uint(op::change_settings(), 32)
            .store_uint(query_id, 64)
            .store_uint(id_set, 32)
            .store_uint(choice, 1)
            .end_cell();

    messages::send_simple(destination, msg_body, send_mode::paid_externally(), target_send_value);
}

() send_votes(slice destination, slice user_addr, int amount, int time_1, int op, int msg_value, int query_id) impure inline {
    throw_unless(error::invalid_amount(), amount > 0);

    var msg_body = begin_cell()
            .store_uint(op, 32)
            .store_uint(query_id, 64)
            .store_slice(user_addr)
            .store_coins(amount)
            .store_uint(time_1, 32)
            .end_cell();

    messages::send_simple(destination, msg_body, send_mode::paid_externally(), msg_value);
}

(cell, ()) update_pool(
        cell pool,
        int id,
        int success,
        cell payload,
        slice target,
        int id_set,
        int choice,
        slice user_addr,
        int amount,
        int gov_supply,
        cell addresses,
        cell settings,
        int query_id
) impure inline_ref {
    int time_now = now();

    (int last_consensus, int preserve, int increase, int decrease, int last_vote_time, int time_to_finalize) = success
            ? get_lot_data(payload)
            : (0, 0, 0, 0, 0, 0);

    if (choice == 0) {
        preserve += amount;
    }
    if (choice == 1) {
        increase += amount;
    }
    if (choice == 2) {
        decrease += amount;
    }

    int consensus_increase = increase - preserve - decrease;
    int consensus_decrease = decrease - preserve - increase;
    (int new_consensus, int new_consensus_votes) = consensus_increase > 0
            ? (1, consensus_increase)
            : (consensus_decrease > 0 ? (2, consensus_decrease) : (0, 0));

    int instant_approve = get_setting(settings, instant_approve_id);
    int half_approve_wait = get_setting(settings, half_approve_wait_id);
    int consensus_period = half_approve_wait * (muldiv(instant_approve, gov_supply, new_consensus_votes * 100) - 1);

    if (last_consensus == new_consensus) {
        int time_passed = time_now - last_vote_time;
        int previous_period = time_to_finalize - last_vote_time;

        last_vote_time -= consensus_period < previous_period
                ? muldiv(consensus_period, time_passed, previous_period)
                : time_passed;
    } else {
        last_vote_time = time_now;
    }

    time_to_finalize = last_vote_time + consensus_period;

    if (time_to_finalize <= time_now) {
        pool~udict_delete?(256, id);
        if (new_consensus) {
            send_change(target, id_set, new_consensus == 1 ? 1 : 0, query_id);
        }
    } else {
        payload = begin_cell()
                .store_slice(target)
                .store_uint(id_set, 32)
                .store_uint(new_consensus, 2)
                .store_coins(preserve)
                .store_coins(increase)
                .store_coins(decrease)
                .store_uint(last_vote_time, 32)
                .store_uint(time_to_finalize, 32)
                .end_cell();

        pool~udict_set_ref(256, id, payload);
    }

    slice votes_minter = get_address(addresses, votes_minter_id);
    send_votes(votes_minter, user_addr, amount, time_now, op::mint(), votes_minter_send_value, query_id);

    return (pool, ());
}

() send_check_setting_format(slice destination, int id_set, slice user_addr, int amount, int choice, int query_id) impure inline {
    var msg_body = begin_cell()
            .store_uint(op::check_settings_format(), 32)
            .store_uint(query_id, 64)
            .store_uint(id_set, 32)
            .store_slice(user_addr)
            .store_coins(amount)
            .store_uint(choice, 2)
            .end_cell();

    messages::send_simple(destination, msg_body, send_mode::paid_externally(), target_send_value);
}

() return_tokens(slice destination, slice user_addr, int amount, int query_id) impure inline_ref {
    throw_unless(error::invalid_amount(), amount > 0);

    var msg_body = begin_cell()
            .store_uint(op::return_tokens(), 32)
            .store_uint(query_id, 64)
            .store_slice(user_addr)
            .store_coins(amount)
            .end_cell();

    messages::send_simple(destination, msg_body, send_mode::paid_externally(), return_tokens_send_value);
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) {
        return ();
    }

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    if (flags & 1) {
        return ();
    }

    slice sender_addr = cs~load_msg_addr();
    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);

    (cell addresses, cell pool, cell settings, int gov_supply) = load_data();

    if (op == op::voting()) {
        slice wallet = get_address(addresses, wallet_id);
        throw_unless(error::invalid_sender_addr(), equal_slices(sender_addr, wallet));

        slice user_addr = in_msg_body~load_msg_addr();
        int amount = in_msg_body~load_coins();

        slice target = "";
        (int id_set, int new_vote, int choice) = (0, 0, 0);
        try {
            target = in_msg_body~load_msg_addr();
            id_set = in_msg_body~load_uint(32);
            new_vote = in_msg_body~load_uint(1);
            choice = in_msg_body~load_uint(2);
            throw_unless(error::invalid_data(), (choice >= 0) & (choice <= 2));
        } catch (_, _) {
            return_tokens(sender_addr, user_addr, amount, query_id);
            return ();
        }

        int id = get_lot_id(target, id_set);
        (cell payload, int success) = pool.udict_get_ref?(256, id);

        if (~ success) {
            if (new_vote) {
                send_check_setting_format(target, id_set, user_addr, amount, choice, query_id);
            } else {
                return_tokens(sender_addr, user_addr, amount, query_id);
            }
            return ();
        }

        pool~update_pool(id, 1, payload, target, id_set, choice, user_addr, amount, gov_supply, addresses, settings, query_id);
        save_data(addresses, pool, settings, gov_supply);

        return ();
    }

    if (op == op::confirm()) {
        int id_set = in_msg_body~load_uint(32);
        int success = in_msg_body~load_uint(1);
        slice user_addr = in_msg_body~load_msg_addr();
        int amount = in_msg_body~load_coins();
        int choice = in_msg_body~load_uint(2);

        cell payload = begin_cell().end_cell();

        if (success) {
            int id = get_lot_id(sender_addr, id_set);
            pool~update_pool(id, 0, payload, sender_addr, id_set, choice, user_addr, amount, gov_supply, addresses, settings, query_id);
            save_data(addresses, pool, settings, gov_supply);
        } else {
            return_tokens(sender_addr, user_addr, amount, query_id);
        }
        return ();
    }

    if (op == op::update()) {
        slice cashier = get_address(addresses, cashier_id);
        throw_unless(error::invalid_sender_addr(), equal_slices(sender_addr, cashier));
        int new_supply = in_msg_body~load_coins();
        save_data(addresses, pool, settings, new_supply);
        return ();
    }

    throw(0xffff);
}

(cell, cell, cell, int) get_voter_data() method_id {
    return load_data();
}