#pragma version >=0.4.0;

#include "imports/stdlib.fc";
#include "imports/errors.fc";
#include "imports/messages.fc";
#include "imports/op-codes.fc";
#include "imports/constants.fc";

const fee_accuracy = 10000; ;; 0.01
const bet_accuracy = 1000000;
const gov_start_price = 1000;
const min_bet_for_change = 100;

const gas_consumption = 15000000; ;; 0.015 TON
const minter_send_value = 30000000; ;; 0.03 TON
const minter_existed_wallet_send_value = 20000000; ;; 0.02 TON
const vault_send_value = 10000000; ;; 0.01 TON

const bet_buy_fee = "bet_buy_fee"c;
const bet_sell_fee = "bet_sell_fee"c;
const gov_buy_fee = "gov_buy_fee"c;
const gov_sell_fee = "gov_sell_fee"c;

(cell, cell, cell) load_data() inline {
    slice ds = get_data().begin_parse();
    return (
            ds~load_ref(), ;; addresses
            ds~load_ref(), ;; supplies
            ds~load_dict() ;; comissions
    );
}

() save_data(cell addresses, cell supplies, cell fees) impure inline {
    set_data(begin_cell()
            .store_ref(addresses)
            .store_ref(supplies)
            .store_dict(fees)
            .end_cell()
    );
}

(slice, slice, slice, slice) get_addresses(cell addresses) inline {
    slice ds = addresses.begin_parse();
    slice vault = ds~load_msg_addr();
    slice bet_minter = ds~load_msg_addr();
    slice gov_minter = ds~load_msg_addr();
    ds = ds~load_ref().begin_parse();
    slice gov_contract = ds~load_msg_addr();
    return (vault, bet_minter, gov_minter, gov_contract);
}

;; ton, bet, gov
(int, int, int) get_supplies(cell supplies) inline {
    slice ds = supplies.begin_parse();
    return (ds~load_coins(), ds~load_coins(), ds~load_coins());
}

cell combine_supplies(int ton_supply, int bet_supply, int gov_supply) impure inline_ref {
    throw_unless(error::invalid_supply(), (ton_supply >= 0) & (bet_supply >= 0) & (gov_supply >= 0));
    return begin_cell()
            .store_coins(ton_supply)
            .store_coins(bet_supply)
            .store_coins(gov_supply)
            .end_cell();
}

int get_fee_factor(cell dic, int id) impure inline {
    (cell payload, int success) = dic.udict_get_ref?(32, id);
    throw_unless(error::dict_value_not_found(), success);
    slice ds = payload.begin_parse();
    ds~skip_bits(2);
    return ds~load_int(16);
}

int sum_with_fee(int amount, int fee_factor) inline {
    return amount - muldiv(amount, fee_factor, fee_accuracy);
}

int sum_without_fee(int amount, int fee_factor) inline {
    return muldiv(amount, fee_accuracy, fee_accuracy - fee_factor);
}

() send_coins(slice destination, slice user_addr, int token_amount, int op, int msg_value, int query_id) impure inline_ref {
    throw_unless(error::invalid_amount(), token_amount > 0);

    var msg_body = begin_cell()
            .store_uint(op, 32)
            .store_uint(query_id, 64)
            .store_slice(user_addr)
            .store_coins(token_amount)
            .end_cell();

    messages::send_simple(destination, msg_body, send_mode::paid_externally(), msg_value);
}

int bet_for_ton(int amount, cell fees) impure inline {
    return sum_with_fee(amount, get_fee_factor(fees, bet_buy_fee)) / bet_accuracy;
}

int ton_for_bet(int amount, cell fees) impure inline {
    return sum_with_fee(amount * bet_accuracy, get_fee_factor(fees, bet_sell_fee));
}

(int, int) gov_for_bet(int amount, int gov_supply, int bet_supply, int ton_supply, cell fees) impure inline {
    int fee_factor = get_fee_factor(fees, gov_buy_fee);
    int amount_with_fee = sum_with_fee(amount, fee_factor);
    int govs = 0;
    int change = 0;
    if (gov_supply > 0) {
        int diff = ton_supply / bet_accuracy - bet_supply;
        govs = muldiv(amount_with_fee, gov_supply, diff);
        change = govs == 0
                ? amount
                : sum_without_fee(amount_with_fee - muldiv(govs, diff, gov_supply), fee_factor);
    } else {
        govs = amount_with_fee / gov_start_price;
        change = govs == 0
                ? amount
                : sum_without_fee(amount_with_fee % gov_start_price, fee_factor);

    }
    return (govs, change);
}

int bet_for_gov(int amount, int gov_supply, int bet_supply, int ton_supply, cell fees) inline {
    amount = muldiv(amount, ton_supply / bet_accuracy - bet_supply, gov_supply);
    return sum_with_fee(amount, get_fee_factor(fees, gov_sell_fee));
}

int change_setting(int value, int step, int min, int max, int sign) inline {
    value += muldiv((max - min), step, fee_accuracy) * sign;
    return (sign > 0) ?
            ((value > max) ? max : value) :
            ((value < min) ? min : value);
}

() return_tokens(slice destination, slice user_addr, int token_amount, int msg_value, int query_id) impure inline {
    throw_unless(error::not_enough_gas_amount(), msg_value >= minter_existed_wallet_send_value);
    send_coins(destination, user_addr, token_amount, op::return_tokens(), minter_existed_wallet_send_value, query_id);
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) {
        return ();
    }

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    if (flags & 1) {
        return ();
    }

    slice sender_addr = cs~load_msg_addr();

    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);

    (cell addresses, cell supplies, cell fees) = load_data();
    (slice vault, slice bet_minter, slice gov_minter, slice gov_contract) = get_addresses(addresses);
    (int ton_supply, int bet_supply, int gov_supply) = get_supplies(supplies);

    ;; buy BET
    if (op == op::deposit_ton()) {
        throw_unless(error::invalid_sender_addr(), equal_slices(sender_addr, vault));
        throw_unless(error::not_enough_gas_amount(), msg_value > gas_consumption +  vault_send_value);

        slice to_addr = in_msg_body~load_msg_addr();
        int ton_amount = in_msg_body~load_coins();
        int update_ton_supply = in_msg_body~load_coins();
        int bet_amount = bet_for_ton(ton_amount, fees);

        supplies = combine_supplies(update_ton_supply, bet_supply + bet_amount, gov_supply);
        send_coins(bet_minter, to_addr, bet_amount, op::mint(), minter_send_value, query_id);

        save_data(addresses, supplies, fees);
        return ();
    }

    if (op == op::burn_notification()) {
        slice to_addr = in_msg_body~load_msg_addr();
        int amount = in_msg_body~load_coins();

        if (equal_slices(sender_addr, bet_minter)) {
            int burning_op = op::burned_bet_for_ton();

            ;; Protection against accidental wasteful burning
            try {
                burning_op = in_msg_body~load_uint(32);
            } catch (_, _) {
            }

            ;; buy GOV
            if (burning_op == op::burned_bet_for_gov()) {
                if (msg_value < gas_consumption + minter_send_value + minter_existed_wallet_send_value) {
                    return_tokens(bet_minter, to_addr, amount, msg_value, query_id);
                    return ();
                }

                (int gov_amount, int change) = gov_for_bet(amount, gov_supply, bet_supply, ton_supply, fees);
                change = change >= min_bet_for_change ? change : 0;

                if (change > 0) {
                    return_tokens(bet_minter, to_addr, change, msg_value, query_id);
                }
                if (gov_amount > 0) {
                    send_coins(gov_minter, to_addr, gov_amount, op::mint(), minter_send_value, query_id);
                    supplies = combine_supplies(ton_supply, bet_supply - amount + change, gov_supply + gov_amount);
                    save_data(addresses, supplies, fees);
                }
                return ();

                ;; sell BET
            } else {
                int ton_balance_before_msg = my_balance - msg_value;
                msg_value -= const::min_tons_for_storage() - min(ton_balance_before_msg, const::min_tons_for_storage());

                if (msg_value < gas_consumption + vault_send_value) {
                    send_coins(bet_minter, to_addr, amount, op::return_tokens(), minter_existed_wallet_send_value, query_id);
                    return ();
                }

                int ton_amount = ton_for_bet(amount, fees);
                supplies = combine_supplies(ton_supply - ton_amount, bet_supply - amount, gov_supply);

                msg_value = (
                        ton_balance_before_msg > const::max_tons_for_storage()
                                ? my_balance - const::max_tons_for_storage()
                                : msg_value
                ) - gas_consumption;

                send_coins(vault, to_addr, ton_amount, op::withdraw_ton(), msg_value, query_id);

                save_data(addresses, supplies, fees);
                return ();
            }
        }

        ;; sell GOV
        if (equal_slices(sender_addr, gov_minter)) {
            if (msg_value < gas_consumption + minter_send_value) {
                return_tokens(bet_minter, to_addr, amount, msg_value, query_id);
                return ();
            }

            int bet_amount = bet_for_gov(amount, gov_supply, bet_supply, ton_supply, fees);

            supplies = combine_supplies(ton_supply, bet_supply + bet_amount, gov_supply - amount);
            send_coins(bet_minter, to_addr, bet_amount, op::mint(), minter_send_value, query_id); ;; todo

            save_data(addresses, supplies, fees);
            return ();
        }

        throw(error::invalid_sender_addr());

    }

    if (op == op::change_settings()) {
        throw_unless(error::invalid_sender_addr(), equal_slices(sender_addr, gov_contract));

        int id = in_msg_body~load_uint(32);
        slice ds = in_msg_body~load_ref().begin_parse();
        int op_target = ds~load_uint(1); ;; 0/1 - value/step
        int op_direction = ds~load_uint(1); ;; 0/1 - inc/dec

        (cell payload, int success) = fees.udict_get_ref?(32, id);
        throw_unless(error::dict_value_not_found(), success);

        slice ds = payload.begin_parse();
        ds~skip_bits(2); ;; always 0, others - reserve
        int value = ds~load_int(16);
        int min_value = ds~load_int(16);
        int max_value = ds~load_int(16);
        int step = ds~load_uint(14);
        int min_step = ds~load_uint(14);
        int max_step = ds~load_uint(14);

        int sign = op_direction ? -1 : 1;
        if (op_target) {
            step = change_setting(step, step, min_step, max_step, sign);
        } else {
            value = change_setting(value, step, min_value, max_value, sign);
        }

        cell fee = begin_cell()
                .store_uint(0, 2)
                .store_int(value, 16)
                .store_int(min_value, 16)
                .store_int(max_value, 16)
                .store_uint(step, 14)
                .store_uint(min_step, 14)
                .store_uint(max_step, 14)
                .end_cell();
        fees~udict_set_ref(32, id, fee);

        save_data(addresses, supplies, fees);
        return ();
    }

    if (op == op::check_settings_format()) {
        throw_unless(error::invalid_sender_addr(), equal_slices(sender_addr, gov_contract));
        throw_unless(error::not_enough_gas_amount(), msg_value >= gas_consumption);

        int id = in_msg_body~load_uint(32);
        slice ds = in_msg_body~load_ref().begin_parse();
        ds~skip_bits(2);
        throw_unless(error::invalid_setting_format(), ds.slice_empty?());

        (_, int success) = fees.udict_get_ref?(32, id);
        throw_unless(error::dict_value_not_found(), success);

        var msg_body = begin_cell()
                .store_uint(op::confirm(), 32)
                .store_uint(query_id, 64)
                .store_uint(id, 32)
                .end_cell();

        messages::send_simple(gov_contract, msg_body, send_mode::normal(), 0);
        return ();
    }

    throw(0xffff);
}

(cell, cell, cell) get_cashier_data() method_id {
    return load_data();
}