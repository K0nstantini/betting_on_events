#pragma version >=0.4.0;

#include "imports/stdlib.fc";
#include "imports/errors.fc";
#include "imports/messages.fc";
#include "imports/op-codes.fc";

const transaction_gas = 10000000; ;; 0.01 TON

slice load_data() inline {
    slice ds = get_data().begin_parse();
    return ds~load_msg_addr();
}

() save_data(slice address) impure inline {
    set_data(begin_cell()
            .store_slice(address)
            .end_cell()
    );
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) {
        return ();
    }

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    if (flags & 1) {
        return ();
    }

    slice sender_addr = cs~load_msg_addr();
    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);

    slice owner = load_data();

    if (op == op::deposit_ton()) {
        int required_gas = transaction_gas * 3;
        throw_unless(error::not_enough_gas_amount(), msg_value > required_gas);

        var msg_body = begin_cell()
                .store_uint(op::deposit_ton(), 32)
                .store_uint(query_id, 64)
                .store_slice(sender_addr)
                .store_coins(msg_value - required_gas)
                .end_cell();

        messages::send_simple(owner, msg_body, send_mode:normal(), required_gas);
        return ();
    }

    if (op == op::withdraw_ton()) {
        throw_unless(error::invalid_sender_addr(), equal_slices(sender_addr, owner));
        throw_unless(error::not_enough_gas_amount(), msg_value >= transaction_gas);

        slice to_addr = in_msg_body~load_msg_addr();
        int amount = in_msg_body~load_coins();

        messages::send_empty(to_addr, send_mode:normal(), amount);
        return ();
    }

    if (op == op::change_addr()) {
        throw_unless(error::invalid_sender_addr(), equal_slices(sender_addr, owner));
        slice new_owner_addr = in_msg_body~load_msg_addr();
        save_data(new_owner_addr);
        return ();
    }

    throw(0xffff);
}

slice get_vault_data() method_id {
    return load_data();
}
