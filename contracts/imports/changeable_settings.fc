#pragma version >=0.4.0;

#include "stdlib.fc";
#include "errors.fc";
#include "messages.fc";
#include "op-codes.fc";

const gas_consumption = 10000000; ;; 0.01 TON

int check_int_value (slice in_msg_body, slice ds) inline {
    int choice = 0;
    try {
        choice = in_msg_body~load_uint(2);
    } catch(_, _) {
        return 0;
    }
    if (~ ((choice = 1) | (choice = 2))) {
        return 0;
    }

    int value = ds~load_int(32);
    int min = ds~load_int(32);
    int max = ds~load_int(32);
    return (value < max) & (value > min);
}

(int, int) settings::check(cell settings, slice sender_addr, slice gov_addr, slice in_msg_body) impure inline {
    throw_unless(error::invalid_sender_addr(), equal_slices(sender_addr, gov_addr));

    int id = in_msg_body~load_uint(32);
    (cell payload, int success) = settings.udict_get_ref?(32, id);

    if (success) {
        slice ds = payload.begin_parse();
        int type_set = ds~load_uint(2);
        if (type_set == 0) {
            success = check_int_value(in_msg_body, ds);
        } else {
            success = 0;
        }
    }

    return (id, success);
}

() settings::send_check_confirm(slice gov_addr, int id, int success, slice in_msg_body, int msg_value, int query_id) impure inline {
    throw_unless(error::not_enough_gas_amount(), msg_value >= gas_consumption);

    var msg_body = begin_cell()
            .store_uint(op::confirm(), 32)
            .store_uint(query_id, 64)
            .store_uint(id, 32)
            .store_uint(success ? 1 : 0, 1)
            .store_slice(in_msg_body)
            .end_cell();

    messages::send_simple(gov_addr, msg_body, send_mode::paid_externally(), msg_value - gas_consumption);
}